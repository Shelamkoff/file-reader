class AsyncFileReader{constructor(){this._reader=new FileReader}static _asBinary(){return"binary"}static _asText(){return"text"}static _asBuffer(){return"buffer"}async readAsDataUrl(e){return this._read(e)}async readAsBinaryString(e){return this._read(e,AsyncFileReader._asBinary())}async readAsText(e,r="UTF-8"){return this._read(e,AsyncFileReader._asText(),r)}async readAsArrayBuffer(e){return this._read(e,AsyncFileReader.asBuffer())}async _read(e,r="",a="UTF-8"){const s=this._reader;return new Promise(function(t,n){switch(s.onload=(e=>t(e.target.result)),s.onerror=n,r){case AsyncFileReader._asText():s.readAsText(e,a);break;case AsyncFileReader._asBinary():s.readAsBinaryString(e);break;case AsyncFileReader._asBuffer():s.readAsArrayBuffer(e);break;default:s.readAsDataURL(e)}})}}export default new AsyncFileReader;
